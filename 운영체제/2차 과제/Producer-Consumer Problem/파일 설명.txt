--원본파일--
코드는 생산자와 소비자를 나타내는 코드이다. 생산자는 아이템을 생성, 소비자는 아이템을 소비하는 역할을 한다.

코드 흐름:
-사용자가 생산자 또는 소비자 프로세스 중 원하는 것을 선택하여 실행시킨다. 생산자를 실행 하면 아이템 생산을, 소비자를 실행하면 아이템 소비를 진행한다.

변수 설명:
-mutex : 생산자 또는 소비자가 실행되는 동안 다른 작업이 실행되지 않도록 상호 배제한다.
-x : 현재 가지고 있는 아이템의 개수
-full, empty: 두 변수의 값을 조정함으로써 아이템의 최대 생산 또는 소비를 제어한다. full이 0일경우 아이템이 존재하지 않으므로 소비자는 실행할수 없다. empty가 0일 경우 생산할 공간이 없으므로 생산자는 실행할수 없다.

생산자 코드:
1. 상호 배제를 시키기 위해 mutex값을 0으로 감소시킨다.
2. full값을 증가시켜 생산했음을 나타낸다.
3. empty값을 감소시켜 빈 공간이 1개 줄었음을 나타낸다.
4. 모든 작업이 끝났으므로 mutex값을 1로 증가시켜 다른 프로세스가 실행 가능하도록 한다.

소비자 코드(생산자의 반대 역할):
1. 상호 배제를 시키기 위해 mutex값을 0으로 감소시킨다.
2. full값을 감소시켜 소비했음을 나타낸다.
3. empty값을 증가시켜 빈 공간이 1개 생겼음을 나타낸다.
4. 모든 작업이 끝났으므로 mutex값을 1로 증가시켜 다른 프로세스가 실행 가능하도록 한다.

--개선파일--
개선 사항:
임계구역의 상태를 표시하는 옵션을 추가하였다.
임계구역의 상태는 버퍼의 상태, 총버퍼크기, 생산자 위치, 소비자 위치, 아이템 개수, 빈 슬롯 수이다.

코드 흐름:
-사용자가 생산자 또는 소비자 프로세스 중 원하는 것을 선택하여 실행시킨다. 생산자를 실행 하면 아이템 생산을, 소비자를 실행하면 아이템 소비를 진행한다.
-사용자는 추가로 현재 임계구역의 상태를 확인할 수 있다.

변수 설명:
-mutex : 생산자 또는 소비자가 실행되는 동안 다른 작업이 실행되지 않도록 상호 배제한다.
-x : 현재 가지고 있는 아이템의 개수
-p_pos : 생산자의 위치를 가리킨다.
-c_pos : 소비자의 위치를 가리킨다.
-buf_size : 버퍼의 최대 크기를 나타낸다.
-*buf : 버퍼를 나타내는 배열, 메인함수에서 동적할당을 통해 buf_size에 맞도록 생성한다.
-(full, empty: buf_size와 x를 이용하여 조건을 표시할 수 있기에 제거)

생산자 코드:
1. 상호 배제를 시키기 위해 mutex값을 0으로 감소시킨다.
2. 생산자의 위치를 증가시킨다. 만일 현재 생산자의 위치가 버퍼의 사이즈와 동일할 경우는 원형 버퍼의 특성으로 인해 1로 이동한다.
3. 생산자가 이동한 위치에 아이템을 생산하였음을 표시하기 위해 1을 입력한다.
4. 모든 작업이 끝났으므로 mutex값을 1로 증가시켜 다른 프로세스가 실행 가능하도록 한다.

소비자 코드(생산자의 반대 역할):
1. 상호 배제를 시키기 위해 mutex값을 0으로 감소시킨다.
2. 현재 소비자의 위치의 아이템을 소비하였음을 표시하기 위해 0을 입력한다.
3. 소비자의 위치를 감소시킨다. 만일 현재 소비자의 위치가 버퍼의 사이즈와 동일할 경우는 원형 버퍼의 특성으로 인해 1로 이동한다.
4. 모든 작업이 끝났으므로 mutex값을 1로 증가시켜 다른 프로세스가 실행 가능하도록 한다.

상태 표기 코드 :
1. 상호 배제를 시키기 위해 mutex값을 0으로 감소시킨다.
2. 버퍼의 상태, 총버퍼크기, 생산자 위치, 소비자 위치, 아이템 개수, 빈 슬롯 수를 순서대로 표시한다.
3. 모든 작업이 끝났으므로 mutex값을 1로 증가시켜 다른 프로세스가 실행 가능하도록 한다.
