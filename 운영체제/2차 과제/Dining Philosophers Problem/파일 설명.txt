--원본파일--
코드는 식사하는 철학자 문제를 나타내는 코드이다. 세마포어와 스레드를 이용하여 식사하는 철학자 문제를 표현한다.

코드 흐름 :
- 철학자 5인의 각각의 philospher()를 실행시키는 스레드를 만든다. thinking이라는 메시지를 출력한다. 스레드를 만들때 철학사의 상태는 eating으로 초기화 된다. 이는 스레드 생성과 동시에 test()함수를 통과하지 못하도록 방지하는 역할을 한다.
- philospher()함수는 take_fork와 put_fork로 이루어져 있고 이를 반복한다. take_fork와 put_fork는 세마포어 mutex를 이용하여 실행중 다른 프로세스의 접근을 막는다. test()함수가 끝나면 take_fork는 세마포어 mutex를 증가시켜 다른 프로세스의 실행을 허가한다. 또 세마포어 S[]를 감소시키는데 이때 S[]가 이미 0이면 증가할 떄까지 대기한다. 이는 test()코드의 if조건을 만족시키지 못하여 식사를 하지 못하여 포크를 잡지 못한 상태에서 put_fork()함수로 진행을 막아 포크를 두는 행위를 막는다. 즉, S[]를 이용하여 손에 없는 포크를 내려두지 못하도록 막는 역할을 한다.
- take_fork는 포크를 집는 것으로 양 옆이 식사중이 아니고, 해당 철학자가 배고픔 상태일 경우 식사를 하도록 한다. eating 메시를 출력후 세마포어S[]를 증가시켜 take_fork()가 끝날수 있도록 한다.
- put_fork는 포크를 두는 것으로 철학자의 상태를 thinking으로 변화시키고 양 옆의 철학자를 test()함수를 통해 식사가 가능한지 판단한다.

변수 설명 :
-N : 철학자의 수
-THINKING, HUNGRY, EATING : 철학자의 상태
-LEFT, RIGHT : 왼쪽, 오른쪽 표현 (철학자가 5명이므로 +4,+1후 %5)
-state[]: 철학자의 상태 표시
-phil[] : 철학자 표시
-mutex : 세마포어, 다른 작업이 동시에 실행되지 않도록 상호 배제
-S[] : 세마포어, 포크를 잡기 전에 두는 행동을 할수 없도록 막는다.

메인함수 :
1. 스레드 배열 생성
2. mutex 세마포어 초기화 (초기값 1, 실행이 가능하다.)
3. S[]배열 세마포어 초기화 (초기값 0, 값이 post실행이 되야 실행가능, 그 전까지 대기)
4. 스레드 생성 (philoshoper()를 실행하는 스레드)
5. 스레드 종료 대기

philospher :
1. take_fork (포크를 잡는 행위)
2. put_fork (포크를 두는 행위)
3. 반복

take_fork :
1. mutex 감소
2. 철학자의 상태 = eating 변경
3. test()함수 실행 (양 옆이 식사중인 상태가 아니면 상태 = 식사중으로 변경)
4. mutex 증가
5. S[] 감소 (함수가 끝나서 put_fork로 넘어가지 않도록 방지 - 즉 test코드를 실행하여 if문을 통과하여 eating으로 상태가 변하기 전까지는 put_fork를 실행하지 않도록 방지한다.)

put_fork :
1. mutex 감소
2. 철학자의 상태 = thinking 변경
3. test(왼쪽 철학자) 실행 (왼쪽의 양 옆이 식사인 상태가 아니면 왼족의 상태 = eating으로 변경)
4. test(오른쪽 철학자) (오른쪽의 양 옆이 식사인 상태가 아니면 왼족의 상태 = eating 변경)
5. mutex 증가

--개선파일--
show_state : 철학자들의 상태를 순서대로 출력한다.. 0은 eating, 1은 hungry, 2는 thinking.
show_graph : 철학자의 상태와 자원할당그래프를 표시한다. (->는 자원 할당, -->는 자원 할당 기다림). 철학자의 상태가 eating이면 자원이 할당된 것, hungry면 자원 할당을 대기하는 것, thinking 자원을 필요로 하지 않는것으로 판단한다. 그래프가 그려지는 동안 다른 스레드가 실행되는 것을 막기 위해 mutex를 이용한다. 현재의 코드에서는 조건에 맞는 경우에 2개의 포크를 동시에 할당하고, 상호 배제를 통해서 제어하기 때문에 자원의 여건이 있지만 실행을 기다리는 상태가 발생할수 있다.

---함수 정리---
--sleep(0), sleep(1)--
-slee(0) : 선점을 풀지 않음 -> 문맥교환 X
-sleep(1) : 선점을 품 -> 문맥교환 O

--C언어 쓰레드--
헤더파일 :
-pthread.h

쓰레드 생성:
-int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);

thread : 쓰레드 식별자
attr : 쓰레드 특성을 지정하기 위해서 사용, 기본 쓰레드 특성을 이용하고자 할경우에 NULL 을 사용
start_routine : 분기시켜서 실행할 쓰레드 함수
arg : start_routine 쓰레드 함수의 매개변수

스레드 종료 대기 (종료된 쓰레드는 모든 자원 반납):
-int pthread_join(pthread_t th, void **thread_return);

th : 기다릴 쓰레드의 식별자
thread_return : 쓰레드의 리턴값

--C언어 세마포어--
헤더파일 : semaphore.h

세마포어 생성 :
-sem_t semaphore;

세마포어 초기화 :
-int sem_init(sem_t *sem, int ps hared, unsigned int value)

sem : 초기화할 세마포어의 포인터
pshared : 0일경우 프로세스 안에서 쓰레드끼리 공유, 그외는 프로세스간 공유
value : 세마포어가 가지는 초기값 (0일경우 접근 불가, 1일경우 접근 가능)

세마포어 하나 감소 :
-sem_wait(sem_t *sem);

세마포어 하나 증가
-sem_post(sem_t *sem);

세마포어 객체 소멸
-sem_destroy(sem_t *sem);
