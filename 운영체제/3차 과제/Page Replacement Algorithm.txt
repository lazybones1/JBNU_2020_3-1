#include<stdio.h>
int n; //요구 페이지 수
int nf; //프레임 크기
int in[100]; //요구 페이지 이름들
int p[50]; //프레임 상태
int hit=0; //페이지 적중 확인
int i,j,k; //for문 변수
int pgfaultcnt=0; //페이지 교체 수
 
//data 입력 함수
void getData() 
{
    printf("\nEnter length of page reference sequence:");
    scanf("%d",&n);
    printf("\nEnter the page reference sequence:");
    for(i=0; i<n; i++)
        scanf("%d",&in[i]);
    printf("\nEnter no of frames:");
    scanf("%d",&nf);
}
 
void initialize() //초기화
{
    pgfaultcnt=0;
    for(i=0; i<nf; i++)
        p[i]=9999;
}
 
int isHit(int data) //메모리에 요구 페이지 있는지 확인
{
    hit=0;
    for(j=0; j<nf; j++)
    {
        if(p[j]==data) //있는 경우 1
        {
            hit=1; 
            break;
        } 
    } 
    return hit;
}
 
int getHitIndex(int data)
{
    int hitind;
    for(k=0; k<nf; k++)
    {
        if(p[k]==data)
        {
            hitind=k;
            break;
        }
    }
    return hitind;
}
 
void dispPages() //메모리 현황 출력
{
    for (k=0; k<nf; k++)
    {
        if(p[k]!=9999)
            printf(" %d",p[k]);
    }
 
}
 
void dispPgFaultCnt()
{
    printf("\nTotal no of page faults:%d",pgfaultcnt);
}
 
void fifo() //먼저 들어온 것이 먼저 나감
{
    initialize(); //초기화
    for(i=0; i<n; i++) //요구 페이지 n개
    {
        printf("\nFor %d :",in[i]); //순서 표기
 
        if(isHit(in[i])==0) //적중 실패
        { 
            for(k=0; k<nf-1; k++) //맨 앞의 원소 제거
                p[k]=p[k+1]; 
            p[k]=in[i]; // 맨 뒤에 원소 추가
            pgfaultcnt++; //페이지 교체 수 증가
            dispPages(); //현재 프레임의 원소 표시
        }
        else //적중 성공
            printf("No page fault");
    }
    dispPgFaultCnt();
}
 
 
void optimal()
{
    initialize(); //초기화
    int near[50]; //다음에 나올 페이지 번째
    for(i=0; i<n; i++) //요구 페이지 수 n
    { 
        printf("\nFor %d :",in[i]); 
        if(isHit(in[i])==0) //페이지 부재
        { 
            for(j=0; j<nf; j++)//모든 프레임
            {
                int pg=p[j]; //프레임 [j]번째
                int found=0;
                for(k=i; k<n; k++)  //이후에 나올 페이지 검사
                {
                    if(pg==in[k]) //이후에 프레임에 있는 경우
                    {
                        near[j]=k; //다음에 나올 같은 페이지
                        found=1;
                        break;
                    }
                    else
                        found=0;
                }
                if(!found) // 이후에 같은 페이지가 나오지 않을 경우
                    near[j]=9999;
            }
            int max=-9999;
            int repindex; 
            for(j=0; j<nf; j++) //프레임 크기
            {
                if(near[j]>max) //가장 나중에 나올 페이지 선택
                {
                    max=near[j]; 
                    repindex=j; //교체할 프레임의 인덱스,
                }
            }
            p[repindex]=in[i]; //이후에 같은 페이지가 나오지 않을 경우 repindex값이 증가하지 않아 프레임이 가득 안참
            pgfaultcnt++;
 
            dispPages();
        }
        else
            printf("No page fault");
    }
    dispPgFaultCnt();
}
 
void lru()
{
    initialize(); // 초기화    
    int least[50];
    for(i=0; i<n; i++)
    { 
        printf("\nFor %d :",in[i]); 
        if(isHit(in[i])==0)
        { 
            for(j=0; j<nf; j++) //프레임수
            {
                int pg=p[j]; //프레임 원소
                int found=0;
                for(k=i-1; k>=0; k--) //현재 프레임의 마지막 원소부터 처음까지
                {
                    if(pg==in[k]) //가장 최근 사용 검색
                    {
                        least[j]=k;
                        found=1;
                        break;
                    }
                    else
                        found=0;
                }
                if(!found)
                    least[j]=-9999;
            }
            int min=9999;
            int repindex;
            for(j=0; j<nf; j++) //프레임수
            {
                if(least[j]<min) //가장 최근 검색, 값이 가장 작은것이 가장 마지막에 사용된 페이지
                {
                    min=least[j];
                    repindex=j;
                }
            }
            p[repindex]=in[i];
            pgfaultcnt++;
 
            dispPages();
        }
        else
            printf("No page fault!");
    }
    dispPgFaultCnt();
}
 
void lfu()
{
    int usedcnt[100];
    int least,repin,sofarcnt=0,bn = 0;
    initialize(); //초기화
    for(i=0; i<nf; i++)
        usedcnt[i]=0; //사용횟수
 
    for(i=0; i<n; i++)
    { 
        printf("\n For %d :",in[i]);
        if(isHit(in[i])) //적중 한 경우
        {
            int hitind=getHitIndex(in[i]); //적중한 프레임
            usedcnt[hitind]++; //사용횟수 증가
            printf("No page fault!");
        }
        else //적중 실패
        {
            pgfaultcnt++;
            if(bn<nf)             
            {
                p[bn]=in[i];
                usedcnt[bn]=usedcnt[bn]+1;
                bn++;
            }
            else
            {
                least=9999;
                for(k=0; k<nf; k++)
                    if(usedcnt[k]<least) //가장 적게 사용된 프레임 선택
                    {
                        least=usedcnt[k];
                        repin=k; //교체할 프레임의 인덱스
                    }
                p[repin]=in[i];
                sofarcnt=0;
                for(k=0; k<=i; k++) //변경할 프레임이 얼마나 사용되었는지 검색
                    if(in[i]==in[k])
                        sofarcnt=sofarcnt+1;
                usedcnt[repin]=sofarcnt; //사용 횟수 추가
            } 
            dispPages();
        } 
    }
    dispPgFaultCnt();
}
 
void secondchance()
{
    int usedbit[50];
    int victimptr=0;
    initialize(); //초기화
    for(i=0; i<nf; i++)
        usedbit[i]=0;
    for(i=0; i<n; i++)
    {
        printf("\nFor %d:",in[i]);
        if(isHit(in[i])) //적중한 경우
        {
            printf("No page fault!");
            int hitindex=getHitIndex(in[i]); //적중 프레임 선택
            if(usedbit[hitindex]==0)
                usedbit[hitindex]=1;
        }
        else //실패한 경우
        {
            pgfaultcnt++;
            if(usedbit[victimptr]==1) //사용됬었던 경우
            {
                do
                {
                    usedbit[victimptr]=0;//기회 1번 
                    victimptr++; //다음 프레임 선택
                    if(victimptr==nf) // 원형큐
                        victimptr=0;
                }
                while(usedbit[victimptr]!=0); //선택할때까지
            }
            if(usedbit[victimptr]==0) //프레임 선택
            {
                p[victimptr]=in[i]; //페이지 교체
                usedbit[victimptr]=1; //사용횟수 증가
                victimptr++;
            }
            dispPages(); 
        }
        if(victimptr==nf)
            victimptr=0;
    }
    dispPgFaultCnt();
}
 
void nur(){
  int refbit[50], changebit[50], bn = 0;//참조비트, 변경비트
  initialize(); //초기화
  for(i=0; i<n; i++){
    printf("\nFor %d:",in[i]);
    if(isHit(in[i])){ //페이지 적중시
      printf("No page fault!");
      int hitindex=getHitIndex(in[i]);
      if(refbit[hitindex]==0) 
        refbit[hitindex]=1;//교체한 프레임 참조 비트 = 1
    }
    else{
      pgfaultcnt++; //페이지 부재 횟수 증가
      if(bn<nf){ //프레임이 가득 차지 않았을경우
        p[bn]=in[i];
        changebit[bn]=1; //변경 비트 = 1
        bn++;
      }
      else{ 
        int rank[50]; //대상 페이지 우선순위
        int pgindex = 0; //대상 페이지 인덱스
        int check = 0; //모두 (1,1)인경우 검사              
        for(k=0; k<nf; k++){ //우선순위 측정
          if(refbit[k] == 0 && changebit[k] == 0) rank[k] = 0;
          else if(refbit[k] == 0 && changebit[k] == 1) rank[k] = 1;
          else if(refbit[k] == 1 && changebit[k] == 0) rank[k] = 2;
          else if(refbit[k] == 1 && changebit[k] == 1) rank[k] = 3;     
        }
        for(k=0; k<nf-1; k++){ //대상 페이지 선정
          if(rank[k]<rank[k+1]) pgindex = k;
          if(rank[k] == rank[k+1]) check++;
        }
        if(check == nf-1) { //모두 (1,1)인경우 (0,0)으로 변경
          for(k=0; k<nf-1; k++){
            refbit[k] =0;
            changebit[k] = 0;
          }
        }
        p[pgindex] = in[i]; //페이지 교체
        refbit[pgindex] = 0; //참조비트 = 0
        changebit[pgindex] = 1;//변경비트 = 1
      }
      dispPages(); //프레임 상태 출력
    }
  }
  dispPgFaultCnt(); // 페이지 부재 수 출력
}

void clock(){
  int refbit[50],  qindex= 0, bn = 0; //참조 비트,  큐인덱스
  initialize(); //초기화
  for(i=0; i<n; i++){
    printf("\nFor %d:",in[i]);
    if(isHit(in[i])){ //페이지 적중시
      printf("No page fault!");
      int hitindex=getHitIndex(in[i]);
      if(refbit[hitindex]==0) 
        refbit[hitindex]=1;//교체한 프레임 참조 비트 = 1
    }
    else{
      pgfaultcnt++; //페이지 부재 횟수 증가
      if(bn<nf){ //프레임이 가득 차지 않았을경우
        p[bn]=in[i]; 
        refbit[bn] = 0;
        qindex++;         
        bn++;
      }
      else{
        while(1){ // 대상페이지를 찾을때 까지
          if(refbit[qindex] == 0){ //대상페이지 선정              
            p[qindex] = in[i]; //페이지 교체              
            qindex++;
            break;
          }
          else{ //참조비트가 1인경우
            refbit[qindex] = 0; //참조비트를 0으로 변경후
            qindex++; //인덱스를 이동
            if(qindex == nf) qindex = 0;
          }
        }
      }
      dispPages(); //프레임 상태 출력        
    }
    if(qindex==nf) qindex = 0;    
  }
  dispPgFaultCnt(); // 페이지 부재 수 출력
}

int main()
{
    int choice;
    while(1)
    {
        printf("\nPage Replacement Algorithms\n1.Enter data\n2.FIFO\n3.Optimal\n4.LRU\n5.LFU\n6.Second Chance\n7.NUR\n8.Clock\n9.Exit\nEnter your choice:");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:
            getData();
            break;
        case 2:
            fifo();
            break;
        case 3:
            optimal();
            break;
        case 4:
            lru();
            break;
        case 5:
            lfu();
            break;
        case 6:
            secondchance();
            break;
        case 7:
            nur();
            break;
        case 8:
            clock();
            break;
        default:
            return 0;
            break;
        }
    }
} 